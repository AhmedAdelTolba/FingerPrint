
UART_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000003ee  00000482  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800072  00800072  00000494  2**0
                  ALLOC
  3 .stab         00000864  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000704  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__vector_13>
  38:	0c 94 9b 01 	jmp	0x336	; 0x336 <__vector_14>
  3c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <main+0x8>
  9a:	0f 92       	push	r0
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
  a0:	85 e5       	ldi	r24, 0x55	; 85
  a2:	8d 83       	std	Y+5, r24	; 0x05
  a4:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_VoidInit>
  a8:	8d 81       	ldd	r24, Y+5	; 0x05
  aa:	0e 94 cb 00 	call	0x196	; 0x196 <UART_VoidSending>
  ae:	ce 01       	movw	r24, r28
  b0:	05 96       	adiw	r24, 0x05	; 5
  b2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <UART_VoidResiving>
  b6:	19 82       	std	Y+1, r1	; 0x01
  b8:	1a 82       	std	Y+2, r1	; 0x02
  ba:	1b 82       	std	Y+3, r1	; 0x03
  bc:	1c 82       	std	Y+4, r1	; 0x04
  be:	0c c0       	rjmp	.+24     	; 0xd8 <main+0x46>
  c0:	00 00       	nop
  c2:	89 81       	ldd	r24, Y+1	; 0x01
  c4:	9a 81       	ldd	r25, Y+2	; 0x02
  c6:	ab 81       	ldd	r26, Y+3	; 0x03
  c8:	bc 81       	ldd	r27, Y+4	; 0x04
  ca:	01 96       	adiw	r24, 0x01	; 1
  cc:	a1 1d       	adc	r26, r1
  ce:	b1 1d       	adc	r27, r1
  d0:	89 83       	std	Y+1, r24	; 0x01
  d2:	9a 83       	std	Y+2, r25	; 0x02
  d4:	ab 83       	std	Y+3, r26	; 0x03
  d6:	bc 83       	std	Y+4, r27	; 0x04
  d8:	89 81       	ldd	r24, Y+1	; 0x01
  da:	9a 81       	ldd	r25, Y+2	; 0x02
  dc:	ab 81       	ldd	r26, Y+3	; 0x03
  de:	bc 81       	ldd	r27, Y+4	; 0x04
  e0:	80 33       	cpi	r24, 0x30	; 48
  e2:	2e e4       	ldi	r18, 0x4E	; 78
  e4:	92 07       	cpc	r25, r18
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	a2 07       	cpc	r26, r18
  ea:	20 e0       	ldi	r18, 0x00	; 0
  ec:	b2 07       	cpc	r27, r18
  ee:	40 f3       	brcs	.-48     	; 0xc0 <main+0x2e>
  f0:	db cf       	rjmp	.-74     	; 0xa8 <main+0x16>

000000f2 <UART_VoidInit>:
static void (* UART_TXInteruptPointer)(void);
static void (* UART_RXInteruptPointer)(void);
static void (* UART_BufferEmptyInteruptPointer)(void);

/*comment!:initialization function to inatialize the baud rate and UART configured  characteristic*/
extern void UART_VoidInit(void) {
  f2:	df 93       	push	r29
  f4:	cf 93       	push	r28
  f6:	00 d0       	rcall	.+0      	; 0xf8 <UART_VoidInit+0x6>
  f8:	00 d0       	rcall	.+0      	; 0xfa <UART_VoidInit+0x8>
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
	//INITIALIZE THE BAUD RATE
	//Getting the value to load in the UBBRH & UBBRL to
	//apply the baud rate from the baudRate[][] array its row os the system clk
	//&its col is the  baud rate & the baudrate[][] array itself depend on the u2x ()
	u16 local_u16UBBRVal = baudRate[SYTEMOSCILLATOR][UART_u8BUDRATE];
  fe:	80 91 62 00 	lds	r24, 0x0062
 102:	90 91 63 00 	lds	r25, 0x0063
 106:	9c 83       	std	Y+4, r25	; 0x04
 108:	8b 83       	std	Y+3, r24	; 0x03
	u8 local_u8UBRRVvalLow, local_u8UBRRVvalHigh;
	//extraxt the low 8bit of the   local_u16UBBRVal
	local_u8UBRRVvalLow = (local_u16UBBRVal);
 10a:	8b 81       	ldd	r24, Y+3	; 0x03
 10c:	8a 83       	std	Y+2, r24	; 0x02
	//extraxt the HIGH 8bti of the   local_u16UBBRVal
	local_u8UBRRVvalHigh = (local_u16UBBRVal >> EIGHTBBITS);
 10e:	8b 81       	ldd	r24, Y+3	; 0x03
 110:	9c 81       	ldd	r25, Y+4	; 0x04
 112:	89 2f       	mov	r24, r25
 114:	99 27       	eor	r25, r25
 116:	89 83       	std	Y+1, r24	; 0x01
	//try to clr the register select in the ubbrh to choose ubbrh
	//not the ucsrc :)
	//and check that its realy cleared
	do {
		UART_u8UBRRH = Clrbit(UART_u8UBRRH, UART_u8UBRRH_URSEL);
 118:	a0 e4       	ldi	r26, 0x40	; 64
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	e0 e4       	ldi	r30, 0x40	; 64
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	8f 77       	andi	r24, 0x7F	; 127
 124:	8c 93       	st	X, r24
	} while (GetBit(UART_u8UBRRH, UART_u8UBRRH_URSEL));
 126:	e0 e4       	ldi	r30, 0x40	; 64
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	88 1f       	adc	r24, r24
 12e:	88 27       	eor	r24, r24
 130:	88 1f       	adc	r24, r24
 132:	88 2f       	mov	r24, r24
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	90 70       	andi	r25, 0x00	; 0
 138:	00 97       	sbiw	r24, 0x00	; 0
 13a:	71 f7       	brne	.-36     	; 0x118 <UART_VoidInit+0x26>
	//assign the val to UART_u8UBRRH
	UART_u8UBRRH = local_u8UBRRVvalHigh;
 13c:	e0 e4       	ldi	r30, 0x40	; 64
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	89 81       	ldd	r24, Y+1	; 0x01
 142:	80 83       	st	Z, r24
	//assign the val to UART_u8UBRRH
	//and clr the ursel bit
	UART_u8UBRRL = Clrbit(local_u8UBRRVvalLow, UART_u8UBRRH_URSEL);
 144:	e9 e2       	ldi	r30, 0x29	; 41
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	8a 81       	ldd	r24, Y+2	; 0x02
 14a:	8f 77       	andi	r24, 0x7F	; 127
 14c:	80 83       	st	Z, r24
	//Initializing the uart controll and status register (a,b,c)
	//initializing UCSRA
	UART_u8UCSRA = conc(0, 0, 0, 0, 0, 0, UART_u8u2x, 0);
 14e:	eb e2       	ldi	r30, 0x2B	; 43
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	10 82       	st	Z, r1
	//initializing UCSRB
	UART_u8UCSRB = conc(UART_u8RXINTERUPTENABLE, UART_u8TXINTERUPTENABLE,
 154:	ea e2       	ldi	r30, 0x2A	; 42
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	88 e1       	ldi	r24, 0x18	; 24
 15a:	80 83       	st	Z, r24
			UART_u8Transmitting, UART_PROG_U8UCSZ2, 0, 0);
	//try to set the register select in the UART_u8UCSRC to choose UART_u8UCSRC
	//not the ubrrh :)
	//and check that its been set
	do {
		UART_u8UCSRC = Setbit(UART_u8UCSRC, UART_u8UCSRC_URSEL);
 15c:	a0 e4       	ldi	r26, 0x40	; 64
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	e0 e4       	ldi	r30, 0x40	; 64
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	80 68       	ori	r24, 0x80	; 128
 168:	8c 93       	st	X, r24
	} while (!GetBit(UART_u8UCSRC, UART_u8UCSRC_URSEL));
 16a:	e0 e4       	ldi	r30, 0x40	; 64
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	88 1f       	adc	r24, r24
 172:	88 27       	eor	r24, r24
 174:	88 1f       	adc	r24, r24
 176:	88 2f       	mov	r24, r24
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	90 70       	andi	r25, 0x00	; 0
 17c:	00 97       	sbiw	r24, 0x00	; 0
 17e:	71 f3       	breq	.-36     	; 0x15c <UART_VoidInit+0x6a>
	//initializing UCSRC
	UART_u8UCSRC = conc(1, 0, UART_u8PARITY1, UART_u8PARITY0,
 180:	e0 e4       	ldi	r30, 0x40	; 64
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	86 e8       	ldi	r24, 0x86	; 134
 186:	80 83       	st	Z, r24
			UART_u8STOPBITSLOCAL, UART_PROG_U8UCSZ1, UART_PROG_U8UCSZ0, 0);
}
 188:	0f 90       	pop	r0
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	cf 91       	pop	r28
 192:	df 91       	pop	r29
 194:	08 95       	ret

00000196 <UART_VoidSending>:
//preprosessor to chek if the UART_u8DATABITS <9
#if (UART_u8DATABITS==5||UART_u8DATABITS==6||UART_u8DATABITS==7||UART_u8DATABITS==8)
/*comment!:sending  8 bit UART_VoidSending is blocking Syncronus API */

extern void UART_VoidSending(u8 copy_u8ValToSend) {
 196:	df 93       	push	r29
 198:	cf 93       	push	r28
 19a:	0f 92       	push	r0
 19c:	cd b7       	in	r28, 0x3d	; 61
 19e:	de b7       	in	r29, 0x3e	; 62
 1a0:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while (!( UART_u8UCSRA & (1 << UART_u8UCSRARXC_UDRE)))
 1a2:	eb e2       	ldi	r30, 0x2B	; 43
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	88 2f       	mov	r24, r24
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	80 72       	andi	r24, 0x20	; 32
 1ae:	90 70       	andi	r25, 0x00	; 0
 1b0:	00 97       	sbiw	r24, 0x00	; 0
 1b2:	b9 f3       	breq	.-18     	; 0x1a2 <UART_VoidSending+0xc>
		;
	/* Put data into buffer, sends the data */
	UART_u8UDR = copy_u8ValToSend;
 1b4:	ec e2       	ldi	r30, 0x2C	; 44
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
 1ba:	80 83       	st	Z, r24
}
 1bc:	0f 90       	pop	r0
 1be:	cf 91       	pop	r28
 1c0:	df 91       	pop	r29
 1c2:	08 95       	ret

000001c4 <UART_VoidResiving>:
/*comment!:Resiving  8 bit UART_VoidResiving is blocking Syncronus API*/
extern void UART_VoidResiving(u8 *copy_u8ValToRecive){
 1c4:	df 93       	push	r29
 1c6:	cf 93       	push	r28
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <UART_VoidResiving+0x6>
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	9a 83       	std	Y+2, r25	; 0x02
 1d0:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for data to be received */
	while ( !(UART_u8UCSRA & (1<<UART_u8UCSRARXC_RXC)) ){}
 1d2:	eb e2       	ldi	r30, 0x2B	; 43
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	88 23       	and	r24, r24
 1da:	dc f7       	brge	.-10     	; 0x1d2 <UART_VoidResiving+0xe>
	/* Get and return received data from buffer */
	*copy_u8ValToRecive=UART_u8UDR;
 1dc:	ec e2       	ldi	r30, 0x2C	; 44
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	e9 81       	ldd	r30, Y+1	; 0x01
 1e4:	fa 81       	ldd	r31, Y+2	; 0x02
 1e6:	80 83       	st	Z, r24
}
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	cf 91       	pop	r28
 1ee:	df 91       	pop	r29
 1f0:	08 95       	ret

000001f2 <UART_voidFlushMemory>:
#elif UART_u8DATABITS==9
//TODO to Implement receiving and transmitting 9bit for future use
#endif
/*comment!: UART_voidFlushMemory is used to flush the UDR buffer */
extern void UART_voidFlushMemory(void){
 1f2:	df 93       	push	r29
 1f4:	cf 93       	push	r28
 1f6:	0f 92       	push	r0
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
 1fc:	04 c0       	rjmp	.+8      	; 0x206 <UART_voidFlushMemory+0x14>
	u8 local_u8dummy;
	//empty the ressiving buffer
	while ( UART_u8UCSRA & (1 << UART_u8UCSRARXC_RXC)) {
		local_u8dummy = UART_u8UDR;
 1fe:	ec e2       	ldi	r30, 0x2C	; 44
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	89 83       	std	Y+1, r24	; 0x01
#endif
/*comment!: UART_voidFlushMemory is used to flush the UDR buffer */
extern void UART_voidFlushMemory(void){
	u8 local_u8dummy;
	//empty the ressiving buffer
	while ( UART_u8UCSRA & (1 << UART_u8UCSRARXC_RXC)) {
 206:	eb e2       	ldi	r30, 0x2B	; 43
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	88 23       	and	r24, r24
 20e:	bc f3       	brlt	.-18     	; 0x1fe <UART_voidFlushMemory+0xc>
		local_u8dummy = UART_u8UDR;
	}

}
 210:	0f 90       	pop	r0
 212:	cf 91       	pop	r28
 214:	df 91       	pop	r29
 216:	08 95       	ret

00000218 <UART_voidcheckfor_Interupts>:
extern void UART_voidcheckfor_Interupts(u8 *copy_u8ptrto3Flags_RX_TX_EMPTY){
 218:	df 93       	push	r29
 21a:	cf 93       	push	r28
 21c:	00 d0       	rcall	.+0      	; 0x21e <UART_voidcheckfor_Interupts+0x6>
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	9a 83       	std	Y+2, r25	; 0x02
 224:	89 83       	std	Y+1, r24	; 0x01

}
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	cf 91       	pop	r28
 22c:	df 91       	pop	r29
 22e:	08 95       	ret

00000230 <UART_voidwriteToUDR>:
/*comment!:UART_voidwriteToUDR write directly to UDR for using it in ISR in high level   */
extern void UART_voidwriteToUDR(u8 copy_u8valToSend){
 230:	df 93       	push	r29
 232:	cf 93       	push	r28
 234:	0f 92       	push	r0
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	89 83       	std	Y+1, r24	; 0x01

	UART_u8UDR=copy_u8valToSend;
 23c:	ec e2       	ldi	r30, 0x2C	; 44
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	89 81       	ldd	r24, Y+1	; 0x01
 242:	80 83       	st	Z, r24

}
 244:	0f 90       	pop	r0
 246:	cf 91       	pop	r28
 248:	df 91       	pop	r29
 24a:	08 95       	ret

0000024c <UART_voidReadFromUDR>:
/*comment!:UART_voidReadFromUDR to read  directly from UDR for using it in ISR in high level   */
extern void UART_voidReadFromUDR(u8 *copy_u8valInUDR){
 24c:	df 93       	push	r29
 24e:	cf 93       	push	r28
 250:	00 d0       	rcall	.+0      	; 0x252 <UART_voidReadFromUDR+0x6>
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
 256:	9a 83       	std	Y+2, r25	; 0x02
 258:	89 83       	std	Y+1, r24	; 0x01

	*copy_u8valInUDR=UART_u8UDR;
 25a:	ec e2       	ldi	r30, 0x2C	; 44
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	e9 81       	ldd	r30, Y+1	; 0x01
 262:	fa 81       	ldd	r31, Y+2	; 0x02
 264:	80 83       	st	Z, r24
}
 266:	0f 90       	pop	r0
 268:	0f 90       	pop	r0
 26a:	cf 91       	pop	r28
 26c:	df 91       	pop	r29
 26e:	08 95       	ret

00000270 <UART_voidSetTX_ISR>:


/*comment!: UART_voidSetTX_ISR call back function to set the ISR */

extern void UART_voidSetTX_ISR(void (*Copy_PtrToTXISR)(void))
{
 270:	df 93       	push	r29
 272:	cf 93       	push	r28
 274:	00 d0       	rcall	.+0      	; 0x276 <UART_voidSetTX_ISR+0x6>
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
 27a:	9a 83       	std	Y+2, r25	; 0x02
 27c:	89 83       	std	Y+1, r24	; 0x01
	UART_TXInteruptPointer=Copy_PtrToTXISR;
 27e:	89 81       	ldd	r24, Y+1	; 0x01
 280:	9a 81       	ldd	r25, Y+2	; 0x02
 282:	90 93 73 00 	sts	0x0073, r25
 286:	80 93 72 00 	sts	0x0072, r24
}
 28a:	0f 90       	pop	r0
 28c:	0f 90       	pop	r0
 28e:	cf 91       	pop	r28
 290:	df 91       	pop	r29
 292:	08 95       	ret

00000294 <UART_voidSetRX_ISR>:
/*comment!: UART_voidSetRX_ISR call back function to set the ISR */

extern void UART_voidSetRX_ISR(void (*Copy_PtrToRXISR)(void))
{
 294:	df 93       	push	r29
 296:	cf 93       	push	r28
 298:	00 d0       	rcall	.+0      	; 0x29a <UART_voidSetRX_ISR+0x6>
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
 29e:	9a 83       	std	Y+2, r25	; 0x02
 2a0:	89 83       	std	Y+1, r24	; 0x01
	UART_RXInteruptPointer=Copy_PtrToRXISR;
 2a2:	89 81       	ldd	r24, Y+1	; 0x01
 2a4:	9a 81       	ldd	r25, Y+2	; 0x02
 2a6:	90 93 75 00 	sts	0x0075, r25
 2aa:	80 93 74 00 	sts	0x0074, r24
}
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	cf 91       	pop	r28
 2b4:	df 91       	pop	r29
 2b6:	08 95       	ret

000002b8 <UART_voidSetBufferEmpty_ISR>:

/*comment!: UART_voidSetBufferEmpty_ISR call back function to set the ISR */
extern void UART_voidSetBufferEmpty_ISR(void (*Copy_PtrToBufferEmptyISR)(void))
{
 2b8:	df 93       	push	r29
 2ba:	cf 93       	push	r28
 2bc:	00 d0       	rcall	.+0      	; 0x2be <UART_voidSetBufferEmpty_ISR+0x6>
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
 2c2:	9a 83       	std	Y+2, r25	; 0x02
 2c4:	89 83       	std	Y+1, r24	; 0x01
	UART_BufferEmptyInteruptPointer=Copy_PtrToBufferEmptyISR;
 2c6:	89 81       	ldd	r24, Y+1	; 0x01
 2c8:	9a 81       	ldd	r25, Y+2	; 0x02
 2ca:	90 93 77 00 	sts	0x0077, r25
 2ce:	80 93 76 00 	sts	0x0076, r24
}
 2d2:	0f 90       	pop	r0
 2d4:	0f 90       	pop	r0
 2d6:	cf 91       	pop	r28
 2d8:	df 91       	pop	r29
 2da:	08 95       	ret

000002dc <__vector_13>:

/*******************************************************************/
/****************  Private API**************************************/
/*******************************************************************/
//reciver
ISR(__vector_13) {
 2dc:	1f 92       	push	r1
 2de:	0f 92       	push	r0
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	0f 92       	push	r0
 2e4:	11 24       	eor	r1, r1
 2e6:	2f 93       	push	r18
 2e8:	3f 93       	push	r19
 2ea:	4f 93       	push	r20
 2ec:	5f 93       	push	r21
 2ee:	6f 93       	push	r22
 2f0:	7f 93       	push	r23
 2f2:	8f 93       	push	r24
 2f4:	9f 93       	push	r25
 2f6:	af 93       	push	r26
 2f8:	bf 93       	push	r27
 2fa:	ef 93       	push	r30
 2fc:	ff 93       	push	r31
 2fe:	df 93       	push	r29
 300:	cf 93       	push	r28
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
	UART_RXInteruptPointer();
 306:	e0 91 74 00 	lds	r30, 0x0074
 30a:	f0 91 75 00 	lds	r31, 0x0075
 30e:	09 95       	icall
}
 310:	cf 91       	pop	r28
 312:	df 91       	pop	r29
 314:	ff 91       	pop	r31
 316:	ef 91       	pop	r30
 318:	bf 91       	pop	r27
 31a:	af 91       	pop	r26
 31c:	9f 91       	pop	r25
 31e:	8f 91       	pop	r24
 320:	7f 91       	pop	r23
 322:	6f 91       	pop	r22
 324:	5f 91       	pop	r21
 326:	4f 91       	pop	r20
 328:	3f 91       	pop	r19
 32a:	2f 91       	pop	r18
 32c:	0f 90       	pop	r0
 32e:	0f be       	out	0x3f, r0	; 63
 330:	0f 90       	pop	r0
 332:	1f 90       	pop	r1
 334:	18 95       	reti

00000336 <__vector_14>:
//udr
ISR(__vector_14) {
 336:	1f 92       	push	r1
 338:	0f 92       	push	r0
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	0f 92       	push	r0
 33e:	11 24       	eor	r1, r1
 340:	2f 93       	push	r18
 342:	3f 93       	push	r19
 344:	4f 93       	push	r20
 346:	5f 93       	push	r21
 348:	6f 93       	push	r22
 34a:	7f 93       	push	r23
 34c:	8f 93       	push	r24
 34e:	9f 93       	push	r25
 350:	af 93       	push	r26
 352:	bf 93       	push	r27
 354:	ef 93       	push	r30
 356:	ff 93       	push	r31
 358:	df 93       	push	r29
 35a:	cf 93       	push	r28
 35c:	cd b7       	in	r28, 0x3d	; 61
 35e:	de b7       	in	r29, 0x3e	; 62
	UART_BufferEmptyInteruptPointer();
 360:	e0 91 76 00 	lds	r30, 0x0076
 364:	f0 91 77 00 	lds	r31, 0x0077
 368:	09 95       	icall
}
 36a:	cf 91       	pop	r28
 36c:	df 91       	pop	r29
 36e:	ff 91       	pop	r31
 370:	ef 91       	pop	r30
 372:	bf 91       	pop	r27
 374:	af 91       	pop	r26
 376:	9f 91       	pop	r25
 378:	8f 91       	pop	r24
 37a:	7f 91       	pop	r23
 37c:	6f 91       	pop	r22
 37e:	5f 91       	pop	r21
 380:	4f 91       	pop	r20
 382:	3f 91       	pop	r19
 384:	2f 91       	pop	r18
 386:	0f 90       	pop	r0
 388:	0f be       	out	0x3f, r0	; 63
 38a:	0f 90       	pop	r0
 38c:	1f 90       	pop	r1
 38e:	18 95       	reti

00000390 <__vector_15>:
//transmiter
ISR(__vector_15) {
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
 398:	11 24       	eor	r1, r1
 39a:	2f 93       	push	r18
 39c:	3f 93       	push	r19
 39e:	4f 93       	push	r20
 3a0:	5f 93       	push	r21
 3a2:	6f 93       	push	r22
 3a4:	7f 93       	push	r23
 3a6:	8f 93       	push	r24
 3a8:	9f 93       	push	r25
 3aa:	af 93       	push	r26
 3ac:	bf 93       	push	r27
 3ae:	ef 93       	push	r30
 3b0:	ff 93       	push	r31
 3b2:	df 93       	push	r29
 3b4:	cf 93       	push	r28
 3b6:	cd b7       	in	r28, 0x3d	; 61
 3b8:	de b7       	in	r29, 0x3e	; 62
	UART_TXInteruptPointer();
 3ba:	e0 91 72 00 	lds	r30, 0x0072
 3be:	f0 91 73 00 	lds	r31, 0x0073
 3c2:	09 95       	icall
}
 3c4:	cf 91       	pop	r28
 3c6:	df 91       	pop	r29
 3c8:	ff 91       	pop	r31
 3ca:	ef 91       	pop	r30
 3cc:	bf 91       	pop	r27
 3ce:	af 91       	pop	r26
 3d0:	9f 91       	pop	r25
 3d2:	8f 91       	pop	r24
 3d4:	7f 91       	pop	r23
 3d6:	6f 91       	pop	r22
 3d8:	5f 91       	pop	r21
 3da:	4f 91       	pop	r20
 3dc:	3f 91       	pop	r19
 3de:	2f 91       	pop	r18
 3e0:	0f 90       	pop	r0
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	0f 90       	pop	r0
 3e6:	1f 90       	pop	r1
 3e8:	18 95       	reti

000003ea <_exit>:
 3ea:	f8 94       	cli

000003ec <__stop_program>:
 3ec:	ff cf       	rjmp	.-2      	; 0x3ec <__stop_program>
